Armchair is a protocol for sending datagrams between and ot2 robot (eve) and a driver code (laptop).
The default port for Armchair protocol is 50000.

SECONDARY TCP CONNECTIONS
sometimes Armchair commands will cause the robot and controller to engage in a second conversation
the rules of these conversations are detailed here
    FTP:
    	Description: used to transfer debug files from server to controller at the end of the 
	      session
        Invoked by: 'close'
	    Port: 50001

    STOP:
        Description: This connection is initialized when the robot is stopping and waiting for
          user input. It cannot simply ask for input on it's terminal because the user will not
          be looking at that screen. A TCP connection is required for the robot to send requests
          for the user to stop and display, and for the controller to relay the users response.
          This probably should have been done over armchair, but because I overthunk it, it
          now happens over this seperate TCP connection. 
          There is a special place in Hell for engineers who violate KISS in the way that this
          connection does. (Sorry)
          Procedure:
          The Controller begins by initializing a socket.
          The robot then creates a connection to that socket. It is possible that a race condition
          will ensue here, so the robot is given 3 tries waiting 2, 4, and 8 seconds between each.
          After they have connected, the robot sends a code of b'\x01' indicating it is stopped
          The controller will wait for user input, and then respond with b'\x01'
          The robot waits for this response and then continues this pattern
          When the robot is done, it sends a code b'\x02', closes connection, and returns control
          When the client recieves b'\x02' it closes connection and returns control
        Invoked by: 'stop' and 'transfer' with stop callback
        Port: 50003

PACKET FIELDS
Header
    8B body_len: the length of the packet minus the header
    1B command_type: the type of the command.
    8B cid: the command id.
Data
    Serialized python iterable args. The args are different for command_types

COMMAND TYPES

x00: 'init'
    controller->robot
    Description: This command tells the server to construct an Ot2Controller instance.
    Args:
        bool simulate: True is simulating   
        bool using_temp_ctrl: True if using temperature control
        float temp: the temperature to keep unit at
        dict labware: labware information see OT2Controller.__init__ (should be a 
	  dataframe with.to_dict())
        dict reagents: reagents information see excel spec DataFrame.to_dict()
	str controller_ip: the ip address of the controller

x01: 'close'
    controller<->robot
    Description: This command is used to tell the robot to terminate. Or to tell the client it is
        safe to terminate. It is not an interrupt.

x03: 'ready'
    robot->controller
    Description: These are effectively Acks. They're used for flow control. They are sent after
        a transfer, dilution, init_containers, or init
    Args:
        int cid: the command id of the command just executed

x04: 'transfer'
    controller->robot
    Description: This is used to perform a transfer operation as in the excel sheet
    Args:
        str src: the chemical_name of the source well to be transfered from 
        list<tuple<str, float>> transfer_steps
        list<tuple<str,list<object>>> callbacks: the ordered callbacks to perform as first elemetn
	    of tuple. Second element is a list of the arguments associated with the callback, 
	    or None if none are used.

x05: 'init_containers'
    controller->robot
    Description: This is used to initialize container(s) for a new reaction.
    Args:
        dict product_df: (DataFrame called .to_dict())
            INDEX:
            str chemical_name: the name of the rxn. initializes container for each row
            COLS:
            str labware: the type of labware this reaction must go in. If None, platereader will
              be used unless no space or too small in which case something else will be used.
            float max_vol: the maximum volume that will every ocupy this container. If not
              specified, some container will be found

x06: 'sending_files'
    robot->controller
    Description: Used to alert client to create a new socket over which to transfer files
    Args:
        int port: the port number of the robot server (the convention here is 50001)
	list<str> filenames: the list of ordered filenames
        NOTE ip not needed because you connected to the robot already
	NOTE a file transfer will be initiated. the eof file delimiter in scoket is 'AFKJldkjvaJKDvJDFDFGHowCouldYouEverHaveThisInAFile'.encode('ascii')

x07: 'pause'
    controller-> robot:
    Description: Causes robot to wait for a timer to expire
    Args:
        float pause_time: the time to wait before continuing execution in seconds

x08: 'stop'
    robot->controller:
    Description: This is used during stop callbacks for the robot to signal the controller to stop
        Note that the stop operation is never actually sent to the robot

x09: 'continue'
    controller->robot:
    Description: Odd command because it does not correspond to an operation. It is used on stop
        callbacks to signal the robot that the user has signaled safe to continue to next

UNFINISHED
error x02
